# FlowMDM: Seamless Human Motion Composition with Blended Positional Encodings
# Uses pixi-within-pyproject approach for dependency management
# Maintains compatibility with original PyTorch 1.13.0+cu117 and Python 3.8-3.9

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "flowmdm"
version = "1.0.0"
description = "FlowMDM: Seamless Human Motion Composition with Blended Positional Encodings"
authors = [
    {name = "German Barquero", email = "gbarquero@cvc.uab.es"},
    {name = "Contributors"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8.0,<3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
]
keywords = ["motion-generation", "diffusion-models", "human-motion", "3d-animation"]

# PyPI dependencies - these will be used by pixi as PyPI dependencies
dependencies = [
    # Essential packages not available in conda-forge
    "pyrender>=0.1.40",
    "aitviewer>=1.12.0",
    "freetype-py>=2.3.0",
    "blobfile>=2.0.0",
    "more_itertools>=10.0.0",
    "ipykernel>=6.30.1,<7",
    "pyvista>=0.46.3,<0.47",
    "pyvistaqt>=0.11.3,<0.12", "attrs",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
]

[project.urls]
Homepage = "https://github.com/yufu-wang/FlowMDM"
Repository = "https://github.com/yufu-wang/FlowMDM"
Issues = "https://github.com/yufu-wang/FlowMDM/issues"

# =============================================================================
# Pixi Configuration - Package Management and Environments
# =============================================================================

[tool.pixi.project]
authors = ["German Barquero <gbarquero@cvc.uab.es>", "Contributors"]
channels = ["conda-forge", "pytorch", "nvidia"]
name = "flowmdm"
platforms = ["win-64", "linux-64"]
version = "1.0.0"
description = "FlowMDM: Seamless Human Motion Composition with Blended Positional Encodings"

[tool.pixi.pypi-options]
# PyTorch CUDA 11.7 wheels require custom index
extra-index-urls = [
    "https://download.pytorch.org/whl/cu117"
]

[tool.pixi.dependencies]
# Conda dependencies - prefer conda-forge when available
python = ">=3.8.0,<3.10"
numpy = ">=1.23.0,<1.25"
scipy = ">=1.9.0,<2.0"
matplotlib = ">=3.8.0,<3.10"
pandas = ">=1.5.0,<2.0"
h5py = ">=3.7.0"
pillow = ">=9.0.0"
pyyaml = ">=6.0"
tqdm = ">=4.60.0"
requests = ">=2.25.0"
urllib3 = ">=1.26.0,<2.0"
joblib = ">=1.0.0"
networkx = ">=3.0"
filelock = ">=3.6.0"
packaging = ">=21.0"
setuptools = ">=60.0.0"
pip = ">=22.0.0"
psutil = ">=5.8.0"
termcolor = ">=2.0.0"

# PyTorch ecosystem
einops = ">=0.6.0"
transformers = ">=4.20.0,<5.0"

# 3D/Graphics dependencies  
imageio = ">=2.25.0"
pyglet = ">=2.0.0"

# SpaCy and NLP
spacy = ">=3.4.0,<4.0"

# Visualization and plotting
plotly = ">=5.0.0"
loguru = ">=0.7.0"
ffmpeg = ">=6.1.0,<8"

[tool.pixi.pypi-dependencies]
# PyTorch with CUDA 11.7 support (uses extra-index-url from [pypi-options])
torch = "==1.13.0+cu117"
torchvision = "==0.14.0+cu117"

# Git-based dependencies (converted from pip install git+https://...)
clip = { git = "https://github.com/openai/CLIP.git" }
smplx = { git = "https://github.com/GuyTevet/smplx.git" }
# Note: chumpy has legacy setup.py that imports pip during build - incompatible with pixi build isolation

# Note: Essential PyPI packages are handled automatically from project.dependencies

# =============================================================================
# Latest Environment - Modern PyTorch and Python versions
# =============================================================================

[tool.pixi.environments]
# Environments that inherit from the base (default)
default = []
# Independent latest environment (completely isolated with no inheritance)
latest = { features = ["latest"], solve-group = "latest", no-default-feature = true }

[tool.pixi.feature.latest.dependencies]
# Python 3.11+ (modern but stable)
python = ">=3.11.0,<3.13"
# Keep only essential system-level packages from conda
ffmpeg = ">=7.1.0"

[tool.pixi.feature.latest.pypi-options]
# PyTorch CUDA 12.6 wheels require updated index
extra-index-urls = [
    "https://download.pytorch.org/whl/cu126"
]
# Use best match strategy to consider all indexes
index-strategy = "unsafe-best-match"

[tool.pixi.feature.latest.pypi-dependencies]
# Latest PyTorch with CUDA 12.6 support - fixed version 2.7.1
torch = "==2.7.1+cu126"
torchvision = "*"
torchaudio = "*"

# Core scientific computing packages - let PyPI resolve to latest
numpy = "*"
scipy = "*"
matplotlib = "*"
pandas = "*"
h5py = "*"
pillow = "*"

# Utilities and system packages - let PyPI resolve to latest
pyyaml = "*"
tqdm = "*"
requests = "*"
urllib3 = "*"
joblib = "*"
networkx = "*"
filelock = "*"
packaging = "*"
setuptools = "*"
pip = "*"
psutil = "*"
termcolor = "*"

# PyTorch ecosystem - let PyPI resolve to latest
einops = "*"
transformers = "*"

# 3D/Graphics dependencies - let PyPI resolve to latest
imageio = "*"
pyglet = "*"

# SpaCy and NLP - let PyPI resolve to latest
spacy = "*"

# Visualization and plotting - let PyPI resolve to latest
plotly = "*"
loguru = "*"

# Git-based dependencies (keep same as original)
clip = { git = "https://github.com/openai/CLIP.git" }
smplx = { git = "https://github.com/GuyTevet/smplx.git" }

[tool.pixi.feature.latest.tasks]
# Setup tasks for latest environment
setup = { cmd = [
    "python", "-m", "spacy", "download", "en_core_web_sm",
    "&&", "pip", "install", "--no-build-isolation", "git+https://github.com/mattloper/chumpy"
], description = "Download SpaCy English model and install chumpy with disabled build isolation (legacy setup.py requires pip during build)" }

# Test CUDA PyTorch installation
test-cuda = { cmd = [
    "python", "-c", "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); cuda_ver = torch.version.cuda if torch.cuda.is_available() else 'N/A'; print(f'CUDA version: {cuda_ver}'); print(f'GPU count: {torch.cuda.device_count()}'); gpu_name = torch.cuda.get_device_name(0) if torch.cuda.is_available() else 'N/A'; print(f'GPU device: {gpu_name}')"
], description = "Test PyTorch CUDA 12.6 installation and GPU availability" }

# Quick PyTorch version check
pytorch-version = { cmd = [
    "python", "-c", "import torch; print(torch.__version__)"
], description = "Quick PyTorch version check for latest environment" }

# Generate motion with latest PyTorch
generate-motion = { cmd = [
    "python", "-m", "runners.generate", 
    "--model_path", "./results/babel/FlowMDM/model001300000.pt",
    "--instructions_file", "./tests/simple-walk/simple_walk_instructions.json",
    "--num_repetitions", "1",
    "--bpe_denoising_step", "125",
    "--guidance_param", "1.5",
    "--dataset", "babel"
], description = "Generate motion from text instructions using latest PyTorch", env = { KMP_DUPLICATE_LIB_OK = "TRUE" } }

# Generate motion with SMPL/SMPLX export using latest PyTorch
generate-motion-ex = { cmd = [
    "python", "-m", "runners.generate-ex", 
    "--model_path", "./results/babel/FlowMDM/model001300000.pt",
    "--instructions_file", "./tests/simple-walk/simple_walk_instructions.json",
    "--num_repetitions", "1",
    "--bpe_denoising_step", "125",
    "--guidance_param", "1.5",
    "--dataset", "babel",
    "--export-smpl",
    "--export-smplx",
    "--smplx-model-path", "../../data"
], description = "Generate motion with SMPL/SMPLX export using latest PyTorch (extended version)", env = { KMP_DUPLICATE_LIB_OK = "TRUE" } }

[tool.pixi.tasks]
# Setup FlowMDM environment - download SpaCy model and install chumpy (legacy build system)
setup = { cmd = [
    "python", "-m", "spacy", "download", "en_core_web_sm",
    "&&", "pip", "install", "git+https://github.com/mattloper/chumpy"
], description = "Download SpaCy English model and install chumpy (legacy setup.py incompatible with pixi build isolation)" }

# Test CUDA PyTorch installation
test-cuda = { cmd = [
    "python", "-c", "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); cuda_ver = torch.version.cuda if torch.cuda.is_available() else 'N/A'; print(f'CUDA version: {cuda_ver}'); print(f'GPU count: {torch.cuda.device_count()}'); gpu_name = torch.cuda.get_device_name(0) if torch.cuda.is_available() else 'N/A'; print(f'GPU device: {gpu_name}')"
], description = "Test PyTorch CUDA installation and GPU availability" }

# Quick PyTorch version check
pytorch-version = { cmd = [
    "python", "-c", "import torch; print(torch.__version__)"
], description = "Quick PyTorch version check" }

# Run FlowMDM generation script
generate = { cmd = [
    "python", "-m", "runners.generate", "--help"
], description = "Run FlowMDM generation script" }

# Generate motion from text instructions
generate-motion = { cmd = [
    "python", "-m", "runners.generate", 
    "--model_path", "./results/babel/FlowMDM/model001300000.pt",
    "--instructions_file", "./tests/simple-walk/simple_walk_instructions.json",
    "--num_repetitions", "1",
    "--bpe_denoising_step", "125",
    "--guidance_param", "1.5",
    "--dataset", "babel"
], description = "Generate motion from text instructions (example with correct parameters)", env = { KMP_DUPLICATE_LIB_OK = "TRUE" } }

# Generate motion with SMPL/SMPLX export using extended script
generate-motion-ex = { cmd = [
    "python", "-m", "runners.generate-ex", 
    "--model_path", "./results/babel/FlowMDM/model001300000.pt",
    "--instructions_file", "./tests/simple-walk/simple_walk_instructions.json",
    "--num_repetitions", "1",
    "--bpe_denoising_step", "125",
    "--guidance_param", "1.5",
    "--dataset", "babel",
    "--export-smpl",
    "--export-smplx",
    "--smplx-model-path", "../../data"
], description = "Generate motion with SMPL/SMPLX export (extended version with additional outputs)", env = { KMP_DUPLICATE_LIB_OK = "TRUE" } }

# Show SMPLX mesh animation from generated results
show-motion-ex = { cmd = [
    "pixi", "run", "-e", "latest", "python", "visualization/show-animation-smplx.py",
    "results/babel/flowmdm/001300000_s10_simple_walk_instructions",
    "--smplx-model-path", "../../data",
    "--autoplay"
], description = "Show interactive SMPLX mesh animation from generated motion results (uses latest env for PyVista+Qt)", env = { KMP_DUPLICATE_LIB_OK = "TRUE" } }

# Show SMPLX mesh animation from generated results
show-motion = { cmd = [
    "pixi", "run", "-e", "latest", "python", "visualization/show-animation.py",
    "results/babel/flowmdm/001300000_s10_simple_walk_instructions",
    "--autoplay"
], description = "Show interactive skeleton animation from generated motion results (uses latest env for PyVista+Qt)", env = { KMP_DUPLICATE_LIB_OK = "TRUE" } }

# Show available generation options
help = { cmd = [
    "python", "-m", "runners.generate", "--help"
], description = "Show FlowMDM generation options" }

# Generate motion with OpenMP fix
generate-safe = { cmd = [
    "python", "-m", "runners.generate"
], description = "Run FlowMDM generation with OpenMP duplicate library fix", env = { KMP_DUPLICATE_LIB_OK = "TRUE" } }

# =============================================================================
# Tool Configurations  
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"] 
addopts = ["-ra", "--strict-markers", "--strict-config"]
markers = [
    "slow: marks tests as slow",
    "gpu: marks tests that require GPU",
    "integration: marks integration tests",
]

[tool.mypy]
python_version = "3.9"  # Target the higher end of supported range
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # FlowMDM legacy code - be permissive
ignore_missing_imports = true
follow_imports = "silent"
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*", 
    "spacy.*",
    "pyrender.*",
    "aitviewer.*",
    "clip.*",
    "smplx.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"  # Target minimum supported Python version
line-length = 88

[tool.ruff.lint] 
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade (but limited by target-version)
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "UP006", # Use `list` instead of `List` (requires Python 3.9+)
    "UP007", # Use `X | Y` for type unions (requires Python 3.10+)
]

[tool.ruff.lint.isort]
known-first-party = ["flowmdm", "runners", "diffusion", "model", "utils", "data_loaders"]

[tool.black]
line-length = 88
target-version = ["py38", "py39"]
include = '\.pyi?$'

[dependency-groups]
latest = [ "pyvista>=0.46.3,<0.47", "pyvistaqt>=0.11.3,<0.12", "pyqt5>=5.15.11,<6", "attrs>=25.3.0,<26"]
